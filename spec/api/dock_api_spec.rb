=begin
#DockGenius API

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.1.0
Contact: hi@dockgenius.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for DockGeniusApiRubyClient::DockApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DockApi' do
  before do
    # run before each test
    @instance = DockGeniusApiRubyClient::DockApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DockApi' do
    it 'should create an instact of DockApi' do
      expect(@instance).to be_instance_of(DockGeniusApiRubyClient::DockApi)
    end
  end

  # unit tests for dock_count
  # Count instances of the model matched by where from the data source.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :where Criteria to match model instances
  # @return [InlineResponse200]
  describe 'dock_count test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_create
  # Create a new instance of the model and persist it into the data source.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Dock] :data Model instance data
  # @return [Dock]
  describe 'dock_create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_create_change_stream_get_docks_change_stream
  # Create a change stream.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :options 
  # @return [File]
  describe 'dock_create_change_stream_get_docks_change_stream test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_create_change_stream_post_docks_change_stream
  # Create a change stream.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :options 
  # @return [File]
  describe 'dock_create_change_stream_post_docks_change_stream test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_delete_by_id
  # Delete a model instance by {{id}} from the data source.
  # 
  # @param id Model id
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'dock_delete_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_exists_get_docksid_exists
  # Check whether a model instance exists in the data source.
  # 
  # @param id Model id
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2002]
  describe 'dock_exists_get_docksid_exists test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_exists_head_docksid
  # Check whether a model instance exists in the data source.
  # 
  # @param id Model id
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2002]
  describe 'dock_exists_head_docksid test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_find
  # Find all instances of the model matched by filter from the data source.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
  # @return [Array<Dock>]
  describe 'dock_find test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_find_by_id
  # Find a model instance by {{id}} from the data source.
  # 
  # @param id Model id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter defining fields and include
  # @return [Dock]
  describe 'dock_find_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_find_one
  # Find first instance of the model matched by filter from the data source.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
  # @return [Dock]
  describe 'dock_find_one test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_prototype_create_listing_agent
  # Creates a new instance in listingAgent of this model.
  # 
  # @param id PersistedModel id
  # @param [Hash] opts the optional parameters
  # @option opts [ListingAgent] :data 
  # @return [ListingAgent]
  describe 'dock_prototype_create_listing_agent test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_prototype_destroy_listing_agent
  # Deletes listingAgent of this model.
  # 
  # @param id PersistedModel id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'dock_prototype_destroy_listing_agent test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_prototype_get_listing_agent
  # Fetches hasOne relation listingAgent.
  # 
  # @param id PersistedModel id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :refresh 
  # @return [ListingAgent]
  describe 'dock_prototype_get_listing_agent test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_prototype_get_marina
  # Fetches belongsTo relation marina.
  # 
  # @param id PersistedModel id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :refresh 
  # @return [Marina]
  describe 'dock_prototype_get_marina test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_prototype_update_attributes_patch_docksid
  # Patch attributes for a model instance and persist it into the data source.
  # 
  # @param id PersistedModel id
  # @param [Hash] opts the optional parameters
  # @option opts [Dock] :data An object of model property name/value pairs
  # @return [Dock]
  describe 'dock_prototype_update_attributes_patch_docksid test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_prototype_update_attributes_put_docksid
  # Patch attributes for a model instance and persist it into the data source.
  # 
  # @param id PersistedModel id
  # @param [Hash] opts the optional parameters
  # @option opts [Dock] :data An object of model property name/value pairs
  # @return [Dock]
  describe 'dock_prototype_update_attributes_put_docksid test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_prototype_update_listing_agent
  # Update listingAgent of this model.
  # 
  # @param id PersistedModel id
  # @param [Hash] opts the optional parameters
  # @option opts [ListingAgent] :data 
  # @return [ListingAgent]
  describe 'dock_prototype_update_listing_agent test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_replace_by_id
  # Replace attributes for a model instance and persist it into the data source.
  # 
  # @param id Model id
  # @param [Hash] opts the optional parameters
  # @option opts [Dock] :data Model instance data
  # @return [Dock]
  describe 'dock_replace_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_replace_or_create
  # Replace an existing model instance or insert a new one into the data source.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Dock] :data Model instance data
  # @return [Dock]
  describe 'dock_replace_or_create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_update_all
  # Update instances of the model matched by {{where}} from the data source.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :where Criteria to match model instances
  # @option opts [Dock] :data An object of model property name/value pairs
  # @return [InlineResponse2001]
  describe 'dock_update_all test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_upsert_patch_docks
  # Patch an existing model instance or insert a new one into the data source.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Dock] :data Model instance data
  # @return [Dock]
  describe 'dock_upsert_patch_docks test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_upsert_put_docks
  # Patch an existing model instance or insert a new one into the data source.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Dock] :data Model instance data
  # @return [Dock]
  describe 'dock_upsert_put_docks test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dock_upsert_with_where
  # Update an existing model instance or insert a new one into the data source based on the where criteria.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :where Criteria to match model instances
  # @option opts [Dock] :data An object of model property name/value pairs
  # @return [Dock]
  describe 'dock_upsert_with_where test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
