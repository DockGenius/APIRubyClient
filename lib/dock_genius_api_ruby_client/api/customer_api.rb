=begin
#DockGenius API

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.1.0
Contact: hi@dockgenius.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module DockGeniusApiRubyClient
  class CustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Confirm a user registration with email verification token.
    # 
    # @param uid 
    # @param token 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :redirect 
    # @return [nil]
    def customer_confirm(uid, token, opts = {})
      customer_confirm_with_http_info(uid, token, opts)
      return nil
    end

    # Confirm a user registration with email verification token.
    # 
    # @param uid 
    # @param token 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :redirect 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_confirm_with_http_info(uid, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_confirm ..."
      end
      # verify the required parameter 'uid' is set
      fail ArgumentError, "Missing the required parameter 'uid' when calling CustomerApi.customer_confirm" if uid.nil?
      # verify the required parameter 'token' is set
      fail ArgumentError, "Missing the required parameter 'token' when calling CustomerApi.customer_confirm" if token.nil?
      # resource path
      local_var_path = "/Customers/confirm".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'uid'] = uid
      query_params[:'token'] = token
      query_params[:'redirect'] = opts[:'redirect'] if !opts[:'redirect'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Count instances of the model matched by where from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [InlineResponse200]
    def customer_count(opts = {})
      data, _status_code, _headers = customer_count_with_http_info(opts)
      return data
    end

    # Count instances of the model matched by where from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def customer_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_count ..."
      end
      # resource path
      local_var_path = "/Customers/count".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new instance of the model and persist it into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Customer]
    def customer_create(opts = {})
      data, _status_code, _headers = customer_create_with_http_info(opts)
      return data
    end

    # Create a new instance of the model and persist it into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_create ..."
      end
      # resource path
      local_var_path = "/Customers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a change stream.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :options 
    # @return [File]
    def customer_create_change_stream_get_customers_change_stream(opts = {})
      data, _status_code, _headers = customer_create_change_stream_get_customers_change_stream_with_http_info(opts)
      return data
    end

    # Create a change stream.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :options 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def customer_create_change_stream_get_customers_change_stream_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_create_change_stream_get_customers_change_stream ..."
      end
      # resource path
      local_var_path = "/Customers/change-stream".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'options'] = opts[:'options'] if !opts[:'options'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_create_change_stream_get_customers_change_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a change stream.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :options 
    # @return [File]
    def customer_create_change_stream_post_customers_change_stream(opts = {})
      data, _status_code, _headers = customer_create_change_stream_post_customers_change_stream_with_http_info(opts)
      return data
    end

    # Create a change stream.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :options 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def customer_create_change_stream_post_customers_change_stream_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_create_change_stream_post_customers_change_stream ..."
      end
      # resource path
      local_var_path = "/Customers/change-stream".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["options"] = opts[:'options'] if !opts[:'options'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_create_change_stream_post_customers_change_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def customer_delete_by_id(id, opts = {})
      data, _status_code, _headers = customer_delete_by_id_with_http_info(id, opts)
      return data
    end

    # Delete a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def customer_delete_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_delete_by_id ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_delete_by_id" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_delete_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def customer_exists_get_customersid_exists(id, opts = {})
      data, _status_code, _headers = customer_exists_get_customersid_exists_with_http_info(id, opts)
      return data
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def customer_exists_get_customersid_exists_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_exists_get_customersid_exists ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_exists_get_customersid_exists" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/exists".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_exists_get_customersid_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def customer_exists_head_customersid(id, opts = {})
      data, _status_code, _headers = customer_exists_head_customersid_with_http_info(id, opts)
      return data
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def customer_exists_head_customersid_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_exists_head_customersid ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_exists_head_customersid" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_exists_head_customersid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all instances of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Array<Customer>]
    def customer_find(opts = {})
      data, _status_code, _headers = customer_find_with_http_info(opts)
      return data
    end

    # Find all instances of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Array<(Array<Customer>, Fixnum, Hash)>] Array<Customer> data, response status code and response headers
    def customer_find_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_find ..."
      end
      # resource path
      local_var_path = "/Customers".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Customer>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields and include
    # @return [Customer]
    def customer_find_by_id(id, opts = {})
      data, _status_code, _headers = customer_find_by_id_with_http_info(id, opts)
      return data
    end

    # Find a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields and include
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_find_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_find_by_id ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_find_by_id" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_find_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find first instance of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Customer]
    def customer_find_one(opts = {})
      data, _status_code, _headers = customer_find_one_with_http_info(opts)
      return data
    end

    # Find first instance of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_find_one_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_find_one ..."
      end
      # resource path
      local_var_path = "/Customers/findOne".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_find_one\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login a user with username/email and password.
    # 
    # @param credentials 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects to include in the response. See the description of return value for more details.
    # @return [Object]
    def customer_login(credentials, opts = {})
      data, _status_code, _headers = customer_login_with_http_info(credentials, opts)
      return data
    end

    # Login a user with username/email and password.
    # 
    # @param credentials 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Related objects to include in the response. See the description of return value for more details.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def customer_login_with_http_info(credentials, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_login ..."
      end
      # verify the required parameter 'credentials' is set
      fail ArgumentError, "Missing the required parameter 'credentials' when calling CustomerApi.customer_login" if credentials.nil?
      # resource path
      local_var_path = "/Customers/login".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credentials)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logout a user with access token.
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_logout(opts = {})
      customer_logout_with_http_info(opts)
      return nil
    end

    # Logout a user with access token.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_logout ..."
      end
      # resource path
      local_var_path = "/Customers/logout".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Counts accessTokens of Customer.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [InlineResponse200]
    def customer_prototype_count_access_tokens(id, opts = {})
      data, _status_code, _headers = customer_prototype_count_access_tokens_with_http_info(id, opts)
      return data
    end

    # Counts accessTokens of Customer.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def customer_prototype_count_access_tokens_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_count_access_tokens ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_count_access_tokens" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/accessTokens/count".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_count_access_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Counts emails of Customer.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [InlineResponse200]
    def customer_prototype_count_emails(id, opts = {})
      data, _status_code, _headers = customer_prototype_count_emails_with_http_info(id, opts)
      return data
    end

    # Counts emails of Customer.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def customer_prototype_count_emails_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_count_emails ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_count_emails" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/emails/count".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_count_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new instance in accessTokens of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [AccessToken] :data 
    # @return [AccessToken]
    def customer_prototype_create_access_tokens(id, opts = {})
      data, _status_code, _headers = customer_prototype_create_access_tokens_with_http_info(id, opts)
      return data
    end

    # Creates a new instance in accessTokens of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [AccessToken] :data 
    # @return [Array<(AccessToken, Fixnum, Hash)>] AccessToken data, response status code and response headers
    def customer_prototype_create_access_tokens_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_create_access_tokens ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_create_access_tokens" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/accessTokens".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_create_access_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new instance in address of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [Address] :data 
    # @return [Address]
    def customer_prototype_create_address(id, opts = {})
      data, _status_code, _headers = customer_prototype_create_address_with_http_info(id, opts)
      return data
    end

    # Creates a new instance in address of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [Address] :data 
    # @return [Array<(Address, Fixnum, Hash)>] Address data, response status code and response headers
    def customer_prototype_create_address_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_create_address ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_create_address" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/address".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Address')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_create_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new instance in emails of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [EmailAddress] :data 
    # @return [EmailAddress]
    def customer_prototype_create_emails(id, opts = {})
      data, _status_code, _headers = customer_prototype_create_emails_with_http_info(id, opts)
      return data
    end

    # Creates a new instance in emails of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [EmailAddress] :data 
    # @return [Array<(EmailAddress, Fixnum, Hash)>] EmailAddress data, response status code and response headers
    def customer_prototype_create_emails_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_create_emails ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_create_emails" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/emails".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailAddress')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_create_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes all accessTokens of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_prototype_delete_access_tokens(id, opts = {})
      customer_prototype_delete_access_tokens_with_http_info(id, opts)
      return nil
    end

    # Deletes all accessTokens of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_prototype_delete_access_tokens_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_delete_access_tokens ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_delete_access_tokens" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/accessTokens".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_delete_access_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes all emails of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_prototype_delete_emails(id, opts = {})
      customer_prototype_delete_emails_with_http_info(id, opts)
      return nil
    end

    # Deletes all emails of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_prototype_delete_emails_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_delete_emails ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_delete_emails" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/emails".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_delete_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes address of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_prototype_destroy_address(id, opts = {})
      customer_prototype_destroy_address_with_http_info(id, opts)
      return nil
    end

    # Deletes address of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_prototype_destroy_address_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_destroy_address ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_destroy_address" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/address".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_destroy_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a related item by id for accessTokens.
    # 
    # @param fk Foreign key for accessTokens
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_prototype_destroy_by_id_access_tokens(fk, id, opts = {})
      customer_prototype_destroy_by_id_access_tokens_with_http_info(fk, id, opts)
      return nil
    end

    # Delete a related item by id for accessTokens.
    # 
    # @param fk Foreign key for accessTokens
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_prototype_destroy_by_id_access_tokens_with_http_info(fk, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_destroy_by_id_access_tokens ..."
      end
      # verify the required parameter 'fk' is set
      fail ArgumentError, "Missing the required parameter 'fk' when calling CustomerApi.customer_prototype_destroy_by_id_access_tokens" if fk.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_destroy_by_id_access_tokens" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/accessTokens/{fk}".sub('{format}','json').sub('{' + 'fk' + '}', fk.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_destroy_by_id_access_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a related item by id for emails.
    # 
    # @param fk Foreign key for emails
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_prototype_destroy_by_id_emails(fk, id, opts = {})
      customer_prototype_destroy_by_id_emails_with_http_info(fk, id, opts)
      return nil
    end

    # Delete a related item by id for emails.
    # 
    # @param fk Foreign key for emails
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_prototype_destroy_by_id_emails_with_http_info(fk, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_destroy_by_id_emails ..."
      end
      # verify the required parameter 'fk' is set
      fail ArgumentError, "Missing the required parameter 'fk' when calling CustomerApi.customer_prototype_destroy_by_id_emails" if fk.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_destroy_by_id_emails" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/emails/{fk}".sub('{format}','json').sub('{' + 'fk' + '}', fk.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_destroy_by_id_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a related item by id for accessTokens.
    # 
    # @param fk Foreign key for accessTokens
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [AccessToken]
    def customer_prototype_find_by_id_access_tokens(fk, id, opts = {})
      data, _status_code, _headers = customer_prototype_find_by_id_access_tokens_with_http_info(fk, id, opts)
      return data
    end

    # Find a related item by id for accessTokens.
    # 
    # @param fk Foreign key for accessTokens
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccessToken, Fixnum, Hash)>] AccessToken data, response status code and response headers
    def customer_prototype_find_by_id_access_tokens_with_http_info(fk, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_find_by_id_access_tokens ..."
      end
      # verify the required parameter 'fk' is set
      fail ArgumentError, "Missing the required parameter 'fk' when calling CustomerApi.customer_prototype_find_by_id_access_tokens" if fk.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_find_by_id_access_tokens" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/accessTokens/{fk}".sub('{format}','json').sub('{' + 'fk' + '}', fk.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_find_by_id_access_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a related item by id for emails.
    # 
    # @param fk Foreign key for emails
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [EmailAddress]
    def customer_prototype_find_by_id_emails(fk, id, opts = {})
      data, _status_code, _headers = customer_prototype_find_by_id_emails_with_http_info(fk, id, opts)
      return data
    end

    # Find a related item by id for emails.
    # 
    # @param fk Foreign key for emails
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailAddress, Fixnum, Hash)>] EmailAddress data, response status code and response headers
    def customer_prototype_find_by_id_emails_with_http_info(fk, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_find_by_id_emails ..."
      end
      # verify the required parameter 'fk' is set
      fail ArgumentError, "Missing the required parameter 'fk' when calling CustomerApi.customer_prototype_find_by_id_emails" if fk.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_find_by_id_emails" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/emails/{fk}".sub('{format}','json').sub('{' + 'fk' + '}', fk.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailAddress')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_find_by_id_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries accessTokens of Customer.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @return [Array<AccessToken>]
    def customer_prototype_get_access_tokens(id, opts = {})
      data, _status_code, _headers = customer_prototype_get_access_tokens_with_http_info(id, opts)
      return data
    end

    # Queries accessTokens of Customer.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @return [Array<(Array<AccessToken>, Fixnum, Hash)>] Array<AccessToken> data, response status code and response headers
    def customer_prototype_get_access_tokens_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_get_access_tokens ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_get_access_tokens" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/accessTokens".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AccessToken>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_get_access_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches hasOne relation address.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :refresh 
    # @return [Address]
    def customer_prototype_get_address(id, opts = {})
      data, _status_code, _headers = customer_prototype_get_address_with_http_info(id, opts)
      return data
    end

    # Fetches hasOne relation address.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :refresh 
    # @return [Array<(Address, Fixnum, Hash)>] Address data, response status code and response headers
    def customer_prototype_get_address_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_get_address ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_get_address" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/address".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Address')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_get_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries emails of Customer.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @return [Array<EmailAddress>]
    def customer_prototype_get_emails(id, opts = {})
      data, _status_code, _headers = customer_prototype_get_emails_with_http_info(id, opts)
      return data
    end

    # Queries emails of Customer.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @return [Array<(Array<EmailAddress>, Fixnum, Hash)>] Array<EmailAddress> data, response status code and response headers
    def customer_prototype_get_emails_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_get_emails ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_get_emails" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/emails".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EmailAddress>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_get_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update address of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [Address] :data 
    # @return [Address]
    def customer_prototype_update_address(id, opts = {})
      data, _status_code, _headers = customer_prototype_update_address_with_http_info(id, opts)
      return data
    end

    # Update address of this model.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [Address] :data 
    # @return [Array<(Address, Fixnum, Hash)>] Address data, response status code and response headers
    def customer_prototype_update_address_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_update_address ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_update_address" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/address".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Address')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_update_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch attributes for a model instance and persist it into the data source.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data An object of model property name/value pairs
    # @return [Customer]
    def customer_prototype_update_attributes_patch_customersid(id, opts = {})
      data, _status_code, _headers = customer_prototype_update_attributes_patch_customersid_with_http_info(id, opts)
      return data
    end

    # Patch attributes for a model instance and persist it into the data source.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data An object of model property name/value pairs
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_prototype_update_attributes_patch_customersid_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_update_attributes_patch_customersid ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_update_attributes_patch_customersid" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_update_attributes_patch_customersid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch attributes for a model instance and persist it into the data source.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data An object of model property name/value pairs
    # @return [Customer]
    def customer_prototype_update_attributes_put_customersid(id, opts = {})
      data, _status_code, _headers = customer_prototype_update_attributes_put_customersid_with_http_info(id, opts)
      return data
    end

    # Patch attributes for a model instance and persist it into the data source.
    # 
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data An object of model property name/value pairs
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_prototype_update_attributes_put_customersid_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_update_attributes_put_customersid ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_update_attributes_put_customersid" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_update_attributes_put_customersid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a related item by id for accessTokens.
    # 
    # @param fk Foreign key for accessTokens
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [AccessToken] :data 
    # @return [AccessToken]
    def customer_prototype_update_by_id_access_tokens(fk, id, opts = {})
      data, _status_code, _headers = customer_prototype_update_by_id_access_tokens_with_http_info(fk, id, opts)
      return data
    end

    # Update a related item by id for accessTokens.
    # 
    # @param fk Foreign key for accessTokens
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [AccessToken] :data 
    # @return [Array<(AccessToken, Fixnum, Hash)>] AccessToken data, response status code and response headers
    def customer_prototype_update_by_id_access_tokens_with_http_info(fk, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_update_by_id_access_tokens ..."
      end
      # verify the required parameter 'fk' is set
      fail ArgumentError, "Missing the required parameter 'fk' when calling CustomerApi.customer_prototype_update_by_id_access_tokens" if fk.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_update_by_id_access_tokens" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/accessTokens/{fk}".sub('{format}','json').sub('{' + 'fk' + '}', fk.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_update_by_id_access_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a related item by id for emails.
    # 
    # @param fk Foreign key for emails
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [EmailAddress] :data 
    # @return [EmailAddress]
    def customer_prototype_update_by_id_emails(fk, id, opts = {})
      data, _status_code, _headers = customer_prototype_update_by_id_emails_with_http_info(fk, id, opts)
      return data
    end

    # Update a related item by id for emails.
    # 
    # @param fk Foreign key for emails
    # @param id User id
    # @param [Hash] opts the optional parameters
    # @option opts [EmailAddress] :data 
    # @return [Array<(EmailAddress, Fixnum, Hash)>] EmailAddress data, response status code and response headers
    def customer_prototype_update_by_id_emails_with_http_info(fk, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_prototype_update_by_id_emails ..."
      end
      # verify the required parameter 'fk' is set
      fail ArgumentError, "Missing the required parameter 'fk' when calling CustomerApi.customer_prototype_update_by_id_emails" if fk.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_prototype_update_by_id_emails" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/emails/{fk}".sub('{format}','json').sub('{' + 'fk' + '}', fk.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailAddress')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_prototype_update_by_id_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace attributes for a model instance and persist it into the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Customer]
    def customer_replace_by_id(id, opts = {})
      data, _status_code, _headers = customer_replace_by_id_with_http_info(id, opts)
      return data
    end

    # Replace attributes for a model instance and persist it into the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_replace_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_replace_by_id ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_replace_by_id" if id.nil?
      # resource path
      local_var_path = "/Customers/{id}/replace".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_replace_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Customer]
    def customer_replace_or_create(opts = {})
      data, _status_code, _headers = customer_replace_or_create_with_http_info(opts)
      return data
    end

    # Replace an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_replace_or_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_replace_or_create ..."
      end
      # resource path
      local_var_path = "/Customers/replaceOrCreate".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_replace_or_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset password for a user with email.
    # 
    # @param options 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_reset_password(options, opts = {})
      customer_reset_password_with_http_info(options, opts)
      return nil
    end

    # Reset password for a user with email.
    # 
    # @param options 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def customer_reset_password_with_http_info(options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_reset_password ..."
      end
      # verify the required parameter 'options' is set
      fail ArgumentError, "Missing the required parameter 'options' when calling CustomerApi.customer_reset_password" if options.nil?
      # resource path
      local_var_path = "/Customers/reset".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(options)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_reset_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update instances of the model matched by {{where}} from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [Customer] :data An object of model property name/value pairs
    # @return [InlineResponse2001]
    def customer_update_all(opts = {})
      data, _status_code, _headers = customer_update_all_with_http_info(opts)
      return data
    end

    # Update instances of the model matched by {{where}} from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [Customer] :data An object of model property name/value pairs
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def customer_update_all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_update_all ..."
      end
      # resource path
      local_var_path = "/Customers/update".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_update_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Customer]
    def customer_upsert_patch_customers(opts = {})
      data, _status_code, _headers = customer_upsert_patch_customers_with_http_info(opts)
      return data
    end

    # Patch an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_upsert_patch_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_upsert_patch_customers ..."
      end
      # resource path
      local_var_path = "/Customers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_upsert_patch_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Customer]
    def customer_upsert_put_customers(opts = {})
      data, _status_code, _headers = customer_upsert_put_customers_with_http_info(opts)
      return data
    end

    # Patch an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :data Model instance data
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_upsert_put_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_upsert_put_customers ..."
      end
      # resource path
      local_var_path = "/Customers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_upsert_put_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing model instance or insert a new one into the data source based on the where criteria.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [Customer] :data An object of model property name/value pairs
    # @return [Customer]
    def customer_upsert_with_where(opts = {})
      data, _status_code, _headers = customer_upsert_with_where_with_http_info(opts)
      return data
    end

    # Update an existing model instance or insert a new one into the data source based on the where criteria.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [Customer] :data An object of model property name/value pairs
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def customer_upsert_with_where_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CustomerApi.customer_upsert_with_where ..."
      end
      # resource path
      local_var_path = "/Customers/upsertWithWhere".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_upsert_with_where\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
