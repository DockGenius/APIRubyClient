=begin
#DockGenius API

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.1.0
Contact: hi@dockgenius.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module DockGeniusApiRubyClient
  class DockApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Count instances of the model matched by where from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [InlineResponse200]
    def dock_count(opts = {})
      data, _status_code, _headers = dock_count_with_http_info(opts)
      return data
    end

    # Count instances of the model matched by where from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def dock_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_count ..."
      end
      # resource path
      local_var_path = "/Docks/count".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new instance of the model and persist it into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Dock]
    def dock_create(opts = {})
      data, _status_code, _headers = dock_create_with_http_info(opts)
      return data
    end

    # Create a new instance of the model and persist it into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_create ..."
      end
      # resource path
      local_var_path = "/Docks".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a change stream.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :options 
    # @return [File]
    def dock_create_change_stream_get_docks_change_stream(opts = {})
      data, _status_code, _headers = dock_create_change_stream_get_docks_change_stream_with_http_info(opts)
      return data
    end

    # Create a change stream.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :options 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def dock_create_change_stream_get_docks_change_stream_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_create_change_stream_get_docks_change_stream ..."
      end
      # resource path
      local_var_path = "/Docks/change-stream".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'options'] = opts[:'options'] if !opts[:'options'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_create_change_stream_get_docks_change_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a change stream.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :options 
    # @return [File]
    def dock_create_change_stream_post_docks_change_stream(opts = {})
      data, _status_code, _headers = dock_create_change_stream_post_docks_change_stream_with_http_info(opts)
      return data
    end

    # Create a change stream.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :options 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def dock_create_change_stream_post_docks_change_stream_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_create_change_stream_post_docks_change_stream ..."
      end
      # resource path
      local_var_path = "/Docks/change-stream".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["options"] = opts[:'options'] if !opts[:'options'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_create_change_stream_post_docks_change_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def dock_delete_by_id(id, opts = {})
      data, _status_code, _headers = dock_delete_by_id_with_http_info(id, opts)
      return data
    end

    # Delete a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def dock_delete_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_delete_by_id ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_delete_by_id" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_delete_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def dock_exists_get_docksid_exists(id, opts = {})
      data, _status_code, _headers = dock_exists_get_docksid_exists_with_http_info(id, opts)
      return data
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def dock_exists_get_docksid_exists_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_exists_get_docksid_exists ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_exists_get_docksid_exists" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/exists".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_exists_get_docksid_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def dock_exists_head_docksid(id, opts = {})
      data, _status_code, _headers = dock_exists_head_docksid_with_http_info(id, opts)
      return data
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def dock_exists_head_docksid_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_exists_head_docksid ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_exists_head_docksid" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_exists_head_docksid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all instances of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Array<Dock>]
    def dock_find(opts = {})
      data, _status_code, _headers = dock_find_with_http_info(opts)
      return data
    end

    # Find all instances of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Array<(Array<Dock>, Fixnum, Hash)>] Array<Dock> data, response status code and response headers
    def dock_find_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_find ..."
      end
      # resource path
      local_var_path = "/Docks".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Dock>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields and include
    # @return [Dock]
    def dock_find_by_id(id, opts = {})
      data, _status_code, _headers = dock_find_by_id_with_http_info(id, opts)
      return data
    end

    # Find a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields and include
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_find_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_find_by_id ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_find_by_id" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_find_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find first instance of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Dock]
    def dock_find_one(opts = {})
      data, _status_code, _headers = dock_find_one_with_http_info(opts)
      return data
    end

    # Find first instance of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_find_one_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_find_one ..."
      end
      # resource path
      local_var_path = "/Docks/findOne".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_find_one\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Counts parameterAssignments of Dock.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [InlineResponse200]
    def dock_prototype_count_parameter_assignments(id, opts = {})
      data, _status_code, _headers = dock_prototype_count_parameter_assignments_with_http_info(id, opts)
      return data
    end

    # Counts parameterAssignments of Dock.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def dock_prototype_count_parameter_assignments_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_count_parameter_assignments ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_count_parameter_assignments" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/parameterAssignments/count".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_count_parameter_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new instance in listingAgent of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [ListingAgent] :data 
    # @return [ListingAgent]
    def dock_prototype_create_listing_agent(id, opts = {})
      data, _status_code, _headers = dock_prototype_create_listing_agent_with_http_info(id, opts)
      return data
    end

    # Creates a new instance in listingAgent of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [ListingAgent] :data 
    # @return [Array<(ListingAgent, Fixnum, Hash)>] ListingAgent data, response status code and response headers
    def dock_prototype_create_listing_agent_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_create_listing_agent ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_create_listing_agent" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/listingAgent".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListingAgent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_create_listing_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new instance in parameterAssignments of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [ParameterAssignment] :data 
    # @return [ParameterAssignment]
    def dock_prototype_create_parameter_assignments(id, opts = {})
      data, _status_code, _headers = dock_prototype_create_parameter_assignments_with_http_info(id, opts)
      return data
    end

    # Creates a new instance in parameterAssignments of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [ParameterAssignment] :data 
    # @return [Array<(ParameterAssignment, Fixnum, Hash)>] ParameterAssignment data, response status code and response headers
    def dock_prototype_create_parameter_assignments_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_create_parameter_assignments ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_create_parameter_assignments" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/parameterAssignments".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParameterAssignment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_create_parameter_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes all parameterAssignments of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dock_prototype_delete_parameter_assignments(id, opts = {})
      dock_prototype_delete_parameter_assignments_with_http_info(id, opts)
      return nil
    end

    # Deletes all parameterAssignments of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def dock_prototype_delete_parameter_assignments_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_delete_parameter_assignments ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_delete_parameter_assignments" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/parameterAssignments".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_delete_parameter_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a related item by id for parameterAssignments.
    # 
    # @param fk Foreign key for parameterAssignments
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dock_prototype_destroy_by_id_parameter_assignments(fk, id, opts = {})
      dock_prototype_destroy_by_id_parameter_assignments_with_http_info(fk, id, opts)
      return nil
    end

    # Delete a related item by id for parameterAssignments.
    # 
    # @param fk Foreign key for parameterAssignments
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def dock_prototype_destroy_by_id_parameter_assignments_with_http_info(fk, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_destroy_by_id_parameter_assignments ..."
      end
      # verify the required parameter 'fk' is set
      fail ArgumentError, "Missing the required parameter 'fk' when calling DockApi.dock_prototype_destroy_by_id_parameter_assignments" if fk.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_destroy_by_id_parameter_assignments" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/parameterAssignments/{fk}".sub('{format}','json').sub('{' + 'fk' + '}', fk.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_destroy_by_id_parameter_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes listingAgent of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dock_prototype_destroy_listing_agent(id, opts = {})
      dock_prototype_destroy_listing_agent_with_http_info(id, opts)
      return nil
    end

    # Deletes listingAgent of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def dock_prototype_destroy_listing_agent_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_destroy_listing_agent ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_destroy_listing_agent" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/listingAgent".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_destroy_listing_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a related item by id for parameterAssignments.
    # 
    # @param fk Foreign key for parameterAssignments
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @return [ParameterAssignment]
    def dock_prototype_find_by_id_parameter_assignments(fk, id, opts = {})
      data, _status_code, _headers = dock_prototype_find_by_id_parameter_assignments_with_http_info(fk, id, opts)
      return data
    end

    # Find a related item by id for parameterAssignments.
    # 
    # @param fk Foreign key for parameterAssignments
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParameterAssignment, Fixnum, Hash)>] ParameterAssignment data, response status code and response headers
    def dock_prototype_find_by_id_parameter_assignments_with_http_info(fk, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_find_by_id_parameter_assignments ..."
      end
      # verify the required parameter 'fk' is set
      fail ArgumentError, "Missing the required parameter 'fk' when calling DockApi.dock_prototype_find_by_id_parameter_assignments" if fk.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_find_by_id_parameter_assignments" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/parameterAssignments/{fk}".sub('{format}','json').sub('{' + 'fk' + '}', fk.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParameterAssignment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_find_by_id_parameter_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches hasOne relation listingAgent.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :refresh 
    # @return [ListingAgent]
    def dock_prototype_get_listing_agent(id, opts = {})
      data, _status_code, _headers = dock_prototype_get_listing_agent_with_http_info(id, opts)
      return data
    end

    # Fetches hasOne relation listingAgent.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :refresh 
    # @return [Array<(ListingAgent, Fixnum, Hash)>] ListingAgent data, response status code and response headers
    def dock_prototype_get_listing_agent_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_get_listing_agent ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_get_listing_agent" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/listingAgent".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListingAgent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_get_listing_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches belongsTo relation marina.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :refresh 
    # @return [Marina]
    def dock_prototype_get_marina(id, opts = {})
      data, _status_code, _headers = dock_prototype_get_marina_with_http_info(id, opts)
      return data
    end

    # Fetches belongsTo relation marina.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :refresh 
    # @return [Array<(Marina, Fixnum, Hash)>] Marina data, response status code and response headers
    def dock_prototype_get_marina_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_get_marina ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_get_marina" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/marina".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Marina')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_get_marina\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries parameterAssignments of Dock.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @return [Array<ParameterAssignment>]
    def dock_prototype_get_parameter_assignments(id, opts = {})
      data, _status_code, _headers = dock_prototype_get_parameter_assignments_with_http_info(id, opts)
      return data
    end

    # Queries parameterAssignments of Dock.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @return [Array<(Array<ParameterAssignment>, Fixnum, Hash)>] Array<ParameterAssignment> data, response status code and response headers
    def dock_prototype_get_parameter_assignments_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_get_parameter_assignments ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_get_parameter_assignments" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/parameterAssignments".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ParameterAssignment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_get_parameter_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch attributes for a model instance and persist it into the data source.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data An object of model property name/value pairs
    # @return [Dock]
    def dock_prototype_update_attributes_patch_docksid(id, opts = {})
      data, _status_code, _headers = dock_prototype_update_attributes_patch_docksid_with_http_info(id, opts)
      return data
    end

    # Patch attributes for a model instance and persist it into the data source.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data An object of model property name/value pairs
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_prototype_update_attributes_patch_docksid_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_update_attributes_patch_docksid ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_update_attributes_patch_docksid" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_update_attributes_patch_docksid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch attributes for a model instance and persist it into the data source.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data An object of model property name/value pairs
    # @return [Dock]
    def dock_prototype_update_attributes_put_docksid(id, opts = {})
      data, _status_code, _headers = dock_prototype_update_attributes_put_docksid_with_http_info(id, opts)
      return data
    end

    # Patch attributes for a model instance and persist it into the data source.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data An object of model property name/value pairs
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_prototype_update_attributes_put_docksid_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_update_attributes_put_docksid ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_update_attributes_put_docksid" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_update_attributes_put_docksid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a related item by id for parameterAssignments.
    # 
    # @param fk Foreign key for parameterAssignments
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [ParameterAssignment] :data 
    # @return [ParameterAssignment]
    def dock_prototype_update_by_id_parameter_assignments(fk, id, opts = {})
      data, _status_code, _headers = dock_prototype_update_by_id_parameter_assignments_with_http_info(fk, id, opts)
      return data
    end

    # Update a related item by id for parameterAssignments.
    # 
    # @param fk Foreign key for parameterAssignments
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [ParameterAssignment] :data 
    # @return [Array<(ParameterAssignment, Fixnum, Hash)>] ParameterAssignment data, response status code and response headers
    def dock_prototype_update_by_id_parameter_assignments_with_http_info(fk, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_update_by_id_parameter_assignments ..."
      end
      # verify the required parameter 'fk' is set
      fail ArgumentError, "Missing the required parameter 'fk' when calling DockApi.dock_prototype_update_by_id_parameter_assignments" if fk.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_update_by_id_parameter_assignments" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/parameterAssignments/{fk}".sub('{format}','json').sub('{' + 'fk' + '}', fk.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParameterAssignment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_update_by_id_parameter_assignments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update listingAgent of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [ListingAgent] :data 
    # @return [ListingAgent]
    def dock_prototype_update_listing_agent(id, opts = {})
      data, _status_code, _headers = dock_prototype_update_listing_agent_with_http_info(id, opts)
      return data
    end

    # Update listingAgent of this model.
    # 
    # @param id PersistedModel id
    # @param [Hash] opts the optional parameters
    # @option opts [ListingAgent] :data 
    # @return [Array<(ListingAgent, Fixnum, Hash)>] ListingAgent data, response status code and response headers
    def dock_prototype_update_listing_agent_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_prototype_update_listing_agent ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_prototype_update_listing_agent" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/listingAgent".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListingAgent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_prototype_update_listing_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace attributes for a model instance and persist it into the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Dock]
    def dock_replace_by_id(id, opts = {})
      data, _status_code, _headers = dock_replace_by_id_with_http_info(id, opts)
      return data
    end

    # Replace attributes for a model instance and persist it into the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_replace_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_replace_by_id ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DockApi.dock_replace_by_id" if id.nil?
      # resource path
      local_var_path = "/Docks/{id}/replace".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_replace_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Dock]
    def dock_replace_or_create(opts = {})
      data, _status_code, _headers = dock_replace_or_create_with_http_info(opts)
      return data
    end

    # Replace an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_replace_or_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_replace_or_create ..."
      end
      # resource path
      local_var_path = "/Docks/replaceOrCreate".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_replace_or_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update instances of the model matched by {{where}} from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [Dock] :data An object of model property name/value pairs
    # @return [InlineResponse2001]
    def dock_update_all(opts = {})
      data, _status_code, _headers = dock_update_all_with_http_info(opts)
      return data
    end

    # Update instances of the model matched by {{where}} from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [Dock] :data An object of model property name/value pairs
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def dock_update_all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_update_all ..."
      end
      # resource path
      local_var_path = "/Docks/update".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_update_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Dock]
    def dock_upsert_patch_docks(opts = {})
      data, _status_code, _headers = dock_upsert_patch_docks_with_http_info(opts)
      return data
    end

    # Patch an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_upsert_patch_docks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_upsert_patch_docks ..."
      end
      # resource path
      local_var_path = "/Docks".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_upsert_patch_docks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Dock]
    def dock_upsert_put_docks(opts = {})
      data, _status_code, _headers = dock_upsert_put_docks_with_http_info(opts)
      return data
    end

    # Patch an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Dock] :data Model instance data
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_upsert_put_docks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_upsert_put_docks ..."
      end
      # resource path
      local_var_path = "/Docks".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_upsert_put_docks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing model instance or insert a new one into the data source based on the where criteria.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [Dock] :data An object of model property name/value pairs
    # @return [Dock]
    def dock_upsert_with_where(opts = {})
      data, _status_code, _headers = dock_upsert_with_where_with_http_info(opts)
      return data
    end

    # Update an existing model instance or insert a new one into the data source based on the where criteria.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [Dock] :data An object of model property name/value pairs
    # @return [Array<(Dock, Fixnum, Hash)>] Dock data, response status code and response headers
    def dock_upsert_with_where_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DockApi.dock_upsert_with_where ..."
      end
      # resource path
      local_var_path = "/Docks/upsertWithWhere".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Dock')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DockApi#dock_upsert_with_where\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
