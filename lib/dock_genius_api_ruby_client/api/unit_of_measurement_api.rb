=begin
#DockGenius API

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.1.0
Contact: hi@dockgenius.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module DockGeniusApiRubyClient
  class UnitOfMeasurementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Count instances of the model matched by where from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [InlineResponse200]
    def unit_of_measurement_count(opts = {})
      data, _status_code, _headers = unit_of_measurement_count_with_http_info(opts)
      return data
    end

    # Count instances of the model matched by where from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def unit_of_measurement_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitOfMeasurementApi.unit_of_measurement_count ..."
      end
      # resource path
      local_var_path = "/UnitsOfMeasurement/count".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitOfMeasurementApi#unit_of_measurement_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def unit_of_measurement_exists_get_units_of_measurementid_exists(id, opts = {})
      data, _status_code, _headers = unit_of_measurement_exists_get_units_of_measurementid_exists_with_http_info(id, opts)
      return data
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def unit_of_measurement_exists_get_units_of_measurementid_exists_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitOfMeasurementApi.unit_of_measurement_exists_get_units_of_measurementid_exists ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UnitOfMeasurementApi.unit_of_measurement_exists_get_units_of_measurementid_exists" if id.nil?
      # resource path
      local_var_path = "/UnitsOfMeasurement/{id}/exists".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitOfMeasurementApi#unit_of_measurement_exists_get_units_of_measurementid_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def unit_of_measurement_exists_head_units_of_measurementid(id, opts = {})
      data, _status_code, _headers = unit_of_measurement_exists_head_units_of_measurementid_with_http_info(id, opts)
      return data
    end

    # Check whether a model instance exists in the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def unit_of_measurement_exists_head_units_of_measurementid_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitOfMeasurementApi.unit_of_measurement_exists_head_units_of_measurementid ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UnitOfMeasurementApi.unit_of_measurement_exists_head_units_of_measurementid" if id.nil?
      # resource path
      local_var_path = "/UnitsOfMeasurement/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitOfMeasurementApi#unit_of_measurement_exists_head_units_of_measurementid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find all instances of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Array<UnitOfMeasurement>]
    def unit_of_measurement_find(opts = {})
      data, _status_code, _headers = unit_of_measurement_find_with_http_info(opts)
      return data
    end

    # Find all instances of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Array<(Array<UnitOfMeasurement>, Fixnum, Hash)>] Array<UnitOfMeasurement> data, response status code and response headers
    def unit_of_measurement_find_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitOfMeasurementApi.unit_of_measurement_find ..."
      end
      # resource path
      local_var_path = "/UnitsOfMeasurement".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UnitOfMeasurement>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitOfMeasurementApi#unit_of_measurement_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields and include
    # @return [UnitOfMeasurement]
    def unit_of_measurement_find_by_id(id, opts = {})
      data, _status_code, _headers = unit_of_measurement_find_by_id_with_http_info(id, opts)
      return data
    end

    # Find a model instance by {{id}} from the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields and include
    # @return [Array<(UnitOfMeasurement, Fixnum, Hash)>] UnitOfMeasurement data, response status code and response headers
    def unit_of_measurement_find_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitOfMeasurementApi.unit_of_measurement_find_by_id ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UnitOfMeasurementApi.unit_of_measurement_find_by_id" if id.nil?
      # resource path
      local_var_path = "/UnitsOfMeasurement/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnitOfMeasurement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitOfMeasurementApi#unit_of_measurement_find_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find first instance of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [UnitOfMeasurement]
    def unit_of_measurement_find_one(opts = {})
      data, _status_code, _headers = unit_of_measurement_find_one_with_http_info(opts)
      return data
    end

    # Find first instance of the model matched by filter from the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter defining fields, where, include, order, offset, and limit
    # @return [Array<(UnitOfMeasurement, Fixnum, Hash)>] UnitOfMeasurement data, response status code and response headers
    def unit_of_measurement_find_one_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitOfMeasurementApi.unit_of_measurement_find_one ..."
      end
      # resource path
      local_var_path = "/UnitsOfMeasurement/findOne".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnitOfMeasurement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitOfMeasurementApi#unit_of_measurement_find_one\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace attributes for a model instance and persist it into the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [UnitOfMeasurement] :data Model instance data
    # @return [UnitOfMeasurement]
    def unit_of_measurement_replace_by_id(id, opts = {})
      data, _status_code, _headers = unit_of_measurement_replace_by_id_with_http_info(id, opts)
      return data
    end

    # Replace attributes for a model instance and persist it into the data source.
    # 
    # @param id Model id
    # @param [Hash] opts the optional parameters
    # @option opts [UnitOfMeasurement] :data Model instance data
    # @return [Array<(UnitOfMeasurement, Fixnum, Hash)>] UnitOfMeasurement data, response status code and response headers
    def unit_of_measurement_replace_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitOfMeasurementApi.unit_of_measurement_replace_by_id ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling UnitOfMeasurementApi.unit_of_measurement_replace_by_id" if id.nil?
      # resource path
      local_var_path = "/UnitsOfMeasurement/{id}/replace".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnitOfMeasurement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitOfMeasurementApi#unit_of_measurement_replace_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [UnitOfMeasurement] :data Model instance data
    # @return [UnitOfMeasurement]
    def unit_of_measurement_replace_or_create(opts = {})
      data, _status_code, _headers = unit_of_measurement_replace_or_create_with_http_info(opts)
      return data
    end

    # Replace an existing model instance or insert a new one into the data source.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [UnitOfMeasurement] :data Model instance data
    # @return [Array<(UnitOfMeasurement, Fixnum, Hash)>] UnitOfMeasurement data, response status code and response headers
    def unit_of_measurement_replace_or_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitOfMeasurementApi.unit_of_measurement_replace_or_create ..."
      end
      # resource path
      local_var_path = "/UnitsOfMeasurement/replaceOrCreate".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnitOfMeasurement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitOfMeasurementApi#unit_of_measurement_replace_or_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing model instance or insert a new one into the data source based on the where criteria.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [UnitOfMeasurement] :data An object of model property name/value pairs
    # @return [UnitOfMeasurement]
    def unit_of_measurement_upsert_with_where(opts = {})
      data, _status_code, _headers = unit_of_measurement_upsert_with_where_with_http_info(opts)
      return data
    end

    # Update an existing model instance or insert a new one into the data source based on the where criteria.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :where Criteria to match model instances
    # @option opts [UnitOfMeasurement] :data An object of model property name/value pairs
    # @return [Array<(UnitOfMeasurement, Fixnum, Hash)>] UnitOfMeasurement data, response status code and response headers
    def unit_of_measurement_upsert_with_where_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitOfMeasurementApi.unit_of_measurement_upsert_with_where ..."
      end
      # resource path
      local_var_path = "/UnitsOfMeasurement/upsertWithWhere".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnitOfMeasurement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitOfMeasurementApi#unit_of_measurement_upsert_with_where\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
